@page
@model Pages.Admin.ReportModel

@{
    ViewData["Title"] = "News Articles Report";
    Layout = "~/Pages/Shared/_LayoutAdmin.cshtml";
}

<style>
    :root {
        --primary-color: #0056b3;
        --secondary-color: #6c757d;
        --background-color: #f8f9fa;
        --text-color: #343a40;
        --accent-color: #ffc107;
        --card-bg: #ffffff;
        --border-color: #dee2e6;
        --border-radius: 8px;
        --padding: 30px;
        --max-width: 1000px;
        --form-bg: #f8f9fa;
        --form-padding: 25px;
        --hover-bg: #f2f2f2;
    }

    body {
        background-color: var(--background-color);
        color: var(--text-color);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .report-container {
        max-width: var(--max-width);
        margin: 30px auto;
        padding: var(--padding);
        background: var(--card-bg);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }

    h1 {
        color: var(--primary-color);
        text-align: center;
        margin-bottom: 20px;
    }

    p {
        text-align: center;
        margin-bottom: 25px;
    }

    .report-form {
        background: var(--form-bg);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        padding: var(--form-padding);
        margin-bottom: 30px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-control {
        width: 100%;
        padding: 0.7rem 1rem;
        font-size: 1rem;
        border: 1px solid #ced4da;
        border-radius: 5px;
        transition: 0.3s;
    }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 5px rgba(0, 86, 179, 0.2);
        }

    .btn-primary {
        width: 100%;
        padding: 0.8rem;
        font-size: 1.1rem;
        border-radius: 5px;
        background-color: var(--primary-color);
        border: none;
        transition: 0.2s;
    }

        .btn-primary:hover {
            background-color: #004494;
        }

    .charts-container {
        display: flex;
        justify-content: center;
        gap: 20px;
        flex-wrap: wrap;
        margin-bottom: 30px;
    }

    .chart-box {
        width: 400px;
        height: 400px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 0.75rem;
            border-bottom: 1px solid var(--border-color);
        }

        .table thead {
            background: #e9ecef;
        }

        .table tbody tr:hover {
            background-color: var(--hover-bg);
        }

    .no-data {
        text-align: center;
        font-style: italic;
        color: var(--secondary-color);
    }
</style>

<div class="report-container">
    <h1>News Articles Report</h1>
    <p>Generate a report of news articles created within a specific date range.</p>

    <div class="report-form">
        <form method="post">
            <div class="form-group">
                <label for="startDate">Start Date</label>
                <input type="date" class="form-control" id="startDate" name="startDate" value="@ViewBag.StartDate?.ToString("yyyy-MM-dd")" />
            </div>
            <div class="form-group">
                <label for="endDate">End Date</label>
                <input type="date" class="form-control" id="endDate" name="endDate" value="@ViewBag.EndDate?.ToString("yyyy-MM-dd")" />
            </div>
            <button type="submit" class="btn btn-primary">Generate Report</button>
        </form>
    </div>

    <hr />

    @if (Model != null && Model.Articles.Any())
    {
        <div class="charts-container" style="margin-bottom:100px">
            <div class="chart-box">
                <h3 class="text-center">Articles Over Time</h3>
                <canvas id="articlesChart"></canvas>
            </div>
            <div class="chart-box">
                <h3 class="text-center">Articles by Category</h3>
                <canvas id="categoryChart"></canvas>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>News Title</th>
                        <th>Headline</th>
                        <th>Category</th>
                        <th>Created Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Articles)
                    {
                        <tr>
                            <td>@item.NewsTitle</td>
                            <td>@item.Headline</td>
                            <td>@item.Category.CategoryName</td>
                            <td>@item.CreatedDate?.ToString("yyyy-MM-dd")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const ctx1 = document.getElementById('articlesChart').getContext('2d');
                const ctx2 = document.getElementById('categoryChart').getContext('2d');

                const articleDates = @Html.Raw(Json.Serialize(Model.Articles
                        .Where(a => a.CreatedDate.HasValue)
                        .Select(a => a.CreatedDate.Value.ToString("yyyy-MM-dd"))
                        .Distinct()));
                const articleCounts = @Html.Raw(Json.Serialize(Model.Articles
                       .Where(a => a.CreatedDate.HasValue)
                       .GroupBy(a => a.CreatedDate.Value.ToString("yyyy-MM-dd"))
                       .Select(g => g.Count())));

                const categoryLabels = @Html.Raw(Json.Serialize(Model.Articles
                      .GroupBy(a => a.Category.CategoryName)
                      .Select(g => g.Key)));
                const categoryCounts = @Html.Raw(Json.Serialize(Model.Articles
                      .GroupBy(a => a.Category.CategoryName)
                      .Select(g => g.Count())));

                new Chart(ctx1, {
                    type: 'bar',
                    data: {
                        labels: articleDates,
                        datasets: [{
                            label: 'Number of Articles',
                            data: articleCounts,
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: { y: { beginAtZero: true } }
                    }
                });

                new Chart(ctx2, {
                    type: 'pie',
                    data: {
                        labels: categoryLabels,
                        datasets: [{
                            label: 'Articles by Category',
                            data: categoryCounts,
                            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4CAF50', '#9C27B0', '#FFC107'],
                            hoverOffset: 4
                        }]
                    },
                    options: {
                        responsive: false
                    }
                });
            });
        </script>
    }
    else
    {
        <p class="no-data">No news articles found within the selected date range.</p>
    }
</div>
